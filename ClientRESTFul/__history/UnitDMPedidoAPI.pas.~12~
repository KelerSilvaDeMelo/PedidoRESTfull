unit UnitDMPedidoAPI;

interface

uses
  System.SysUtils, System.Classes, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, IdHTTP, IdSSLOpenSSL, System.JSON, ClientConstsPedido,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf;

type
  TdmPedidoAPI = class(TDataModule)
    FDMemTableClientes: TFDMemTable;
    FDMemTableProdutos: TFDMemTable;
    FDMemTablePedidos: TFDMemTable;
  private
    procedure ConfigurarMemTableClientes;
    procedure ConfigurarMemTableProdutos;
    procedure ConfigurarMemTablePedidos;

  public
    procedure ListarClientes;
    procedure ListarProdutos;
    procedure ListarPedidos;
  end;

var
  dmPedidoAPI: TdmPedidoAPI;

implementation

uses
  UnitDMBaseAPI;

{%CLASSGROUP 'Vcl.Controls.TControl'}
{$R *.dfm}
{ --------------------------------[ PRIVADO ]--------------------------------- }

// Configura o TFDMemTableClientes
procedure TdmPedidoAPI.ConfigurarMemTableClientes;
begin
  with FDMemTableClientes do
  begin
    Close;
    FieldDefs.Clear;
    FieldDefs.Add('codigo_cliente', ftInteger);
    FieldDefs.Add('nome_cliente', ftString, 100);
    CreateDataSet;
    Open;
  end;
end;

// Configura o TFDMemTableProdutos
procedure TdmPedidoAPI.ConfigurarMemTableProdutos;
begin
  with FDMemTableProdutos do
  begin
    Close;
    FieldDefs.Clear;
    FieldDefs.Add('codigo_produto', ftInteger);
    FieldDefs.Add('descricao_produto', ftString, 100);
    FieldDefs.Add('preco_venda', ftFloat);
    CreateDataSet;
    Open;
  end;
end;

// Configura o TFDMemTablePedidos
procedure TdmPedidoAPI.ConfigurarMemTablePedidos;
begin
  with FDMemTablePedidos do
  begin
    Close;
    FieldDefs.Clear;
    FieldDefs.Add('numero_pedido', ftInteger);
    FieldDefs.Add('codigo_cliente', ftInteger);
    FieldDefs.Add('data_emissao', ftDate);
    FieldDefs.Add('valor_total', ftFloat);
    CreateDataSet;
    Open;
  end;
end;

{ --------------------------------[ PÚBLICO ]--------------------------------- }

// Lista os clientes e popula o TFDMemTableClientes
procedure TdmPedidoAPI.ListarClientes;
var
  HTTPClient: TIdHTTP;
  SSLHandler: TIdSSLIOHandlerSocketOpenSSL;
  Url: string;
  JsonResponse: string;
  JsonArray: TJSONArray;
  JsonObject: TJSONObject;
  I: Integer;
begin
  HTTPClient := TIdHTTP.Create(nil);
  SSLHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  try
    HTTPClient.IOHandler := SSLHandler;
    Url := ENDPOINT_LISTAR_CLIENTES;

    // As constante estão definida em ClientConstsPedido
    try
      JsonResponse := HTTPClient.Get(Url);
      JsonArray := TJSONObject.ParseJSONValue
        (TEncoding.UTF8.GetBytes(JsonResponse), 0) as TJSONArray;

      if JsonArray = nil then
        raise Exception.Create('Resposta inválida do servidor.');

      ConfigurarMemTableClientes;
      FDMemTableClientes.EmptyDataSet;

      for I := 0 to JsonArray.Count - 1 do
      begin
        JsonObject := JsonArray.Items[I] as TJSONObject;
        FDMemTableClientes.Append;
        FDMemTableClientes.FieldByName('codigo_cliente').AsInteger :=
          JsonObject.GetValue<Integer>('codigo_cliente');
        FDMemTableClientes.FieldByName('nome_cliente').AsString :=
          JsonObject.GetValue<string>('nome_cliente');
        FDMemTableClientes.Post;
      end;

      FDMemTableClientes.SaveToFile( dmBaseAPI.PastaCache + FDMemTableClientes.Name );
    except
      on E: Exception do
        raise Exception.Create('Indisponibilidade momentânea na lista de clientes: ' +
          E.Message);
    end;
  finally
    HTTPClient.Free;
    SSLHandler.Free;
  end;
end;

// Lista os produtos e popula o TFDMemTableProdutos
procedure TdmPedidoAPI.ListarProdutos;
var
  HTTPClient: TIdHTTP;
  SSLHandler: TIdSSLIOHandlerSocketOpenSSL;
  Url: string;
  JsonResponse: string;
  JsonArray: TJSONArray;
  JsonObject: TJSONObject;
  I: Integer;
begin
  HTTPClient := TIdHTTP.Create(nil);
  SSLHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  try
    HTTPClient.IOHandler := SSLHandler;
    Url := ENDPOINT_LISTAR_PRODUTOS;
    try
      JsonResponse := HTTPClient.Get(Url);
      JsonArray := TJSONObject.ParseJSONValue
        (TEncoding.UTF8.GetBytes(JsonResponse), 0) as TJSONArray;

      if JsonArray = nil then
        raise Exception.Create('Resposta inválida do servidor.');

      ConfigurarMemTableProdutos;
      FDMemTableProdutos.EmptyDataSet;

      for I := 0 to JsonArray.Count - 1 do
      begin
        JsonObject := JsonArray.Items[I] as TJSONObject;
        FDMemTableProdutos.Append;
        FDMemTableProdutos.FieldByName('codigo_produto').AsInteger :=
          JsonObject.GetValue<Integer>('codigo_produto');
        FDMemTableProdutos.FieldByName('descricao_produto').AsString :=
          JsonObject.GetValue<string>('descricao_produto');
        FDMemTableProdutos.FieldByName('preco_venda').AsFloat :=
          JsonObject.GetValue<Double>('preco_venda');
        FDMemTableProdutos.Post;
      end;

      FDMemTableProdutos.SaveToFile( dmBaseAPI.PastaCache + FDMemTableProdutos.Name );
    except
      on E: Exception do
        raise Exception.Create('Indisponibilidade momentânea na lista de produtos: ' +
          E.Message);
    end;
  finally
    HTTPClient.Free;
    SSLHandler.Free;
  end;
end;

// Lista os pedidos e popula o TFDMemTablePedidos
procedure TdmPedidoAPI.ListarPedidos;
var
  HTTPClient: TIdHTTP;
  SSLHandler: TIdSSLIOHandlerSocketOpenSSL;
  Url: string;
  JsonResponse: string;
  JsonArray: TJSONArray;
  JsonObject: TJSONObject;
  I: Integer;
begin
  HTTPClient := TIdHTTP.Create(nil);
  SSLHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  try
    HTTPClient.IOHandler := SSLHandler;
    Url := ENDPOINT_LISTAR_PEDIDOS;
    try
      JsonResponse := HTTPClient.Get(Url);
      JsonArray := TJSONObject.ParseJSONValue
        (TEncoding.UTF8.GetBytes(JsonResponse), 0) as TJSONArray;

      if JsonArray = nil then
        raise Exception.Create('Resposta inválida do servidor.');

      ConfigurarMemTablePedidos;
      FDMemTablePedidos.EmptyDataSet;

      for I := 0 to JsonArray.Count - 1 do
      begin
        JsonObject := JsonArray.Items[I] as TJSONObject;
        FDMemTablePedidos.Append;
        FDMemTablePedidos.FieldByName('numero_pedido').AsInteger :=
          JsonObject.GetValue<Integer>('numero_pedido');
        FDMemTablePedidos.FieldByName('codigo_cliente').AsInteger :=
          JsonObject.GetValue<Integer>('codigo_cliente');
        FDMemTablePedidos.FieldByName('data_emissao').AsDateTime :=
          JsonObject.GetValue<TDateTime>('data_emissao');
        FDMemTablePedidos.FieldByName('valor_total').AsFloat :=
          JsonObject.GetValue<Double>('valor_total');
        FDMemTablePedidos.Post;
      end;

      FDMemTablePedidos.SaveToFile( dmBaseAPI.PastaCache + FDMemTablePedidos.Name );
    except
      on E: Exception do
        raise Exception.Create('Indisponibilidade momentânea na lista de pedidos: ' +
          E.Message);
    end;
  finally
    HTTPClient.Free;
    SSLHandler.Free;
  end;
end;

end.
